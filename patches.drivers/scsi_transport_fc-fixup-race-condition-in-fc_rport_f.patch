From: Hannes Reinecke <hare@suse.de>
Date: Wed, 29 Mar 2017 13:14:50 +0200
Subject: scsi_transport_fc: fixup race condition in fc_rport_final_delete()
References: bsc#1013887
Patch-Mainline: Not yet, under validation by customer

When calling fc_rport_final_delete() there is a chance that
fc_starget_delete() is already running or queue in the workqueue.
In that case we race against fc_starget_delete, causing a kernel
oops like

 warn_slowpath_fmt+0x4c/0x50
 kernfs_remove_by_name_ns+0x84/0x90
 attribute_container_remove_attrs+0x45/0x70
 attribute_container_class_device_del+0xe/0x20
 transport_remove_classdev+0x4a/0x60
 attribute_container_device_trigger+0xa6/0xb0
 scsi_target_reap_ref_release+0x20/0x40 [scsi_mod]
 scsi_remove_target+0x17c/0x1b0 [scsi_mod]
 process_one_work+0x14e/0x410
 worker_thread+0x116/0x490
 kthread+0xbd/0xe0

Signed-off-by: Hannes Reinecke <hare@suse.com>
---
 drivers/scsi/scsi_transport_fc.c | 20 ++++++++++++++++++--
 include/scsi/scsi_transport_fc.h |  1 +
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/scsi/scsi_transport_fc.c b/drivers/scsi/scsi_transport_fc.c
index 00703f7..9a45512 100644
--- a/drivers/scsi/scsi_transport_fc.c
+++ b/drivers/scsi/scsi_transport_fc.c
@@ -2524,7 +2524,12 @@ fc_starget_delete(struct work_struct *work)
 	struct fc_rport *rport =
 		container_of(work, struct fc_rport, stgt_delete_work);
 	struct Scsi_Host *shost = rport_to_shost(rport);
+	unsigned long flags;
 
+	spin_lock_irqsave(shost->host_lock, flags);
+	rport->flags &= ~FC_RPORT_TGT_DELETE_PENDING;
+	rport->scsi_target_id = -1;
+	spin_unlock_irqrestore(shost->host_lock, flags);
 	fc_terminate_rport_io(rport);
 	scsi_remove_target(&rport->dev);
 }
@@ -2555,6 +2560,13 @@ fc_rport_final_delete(struct work_struct *work)
 		scsi_flush_work(shost);
 
 	/*
+	 * if a target delete is pending, flush the SCSI host work_q
+	 * so that we don't race against it.
+	 */
+	if (rport->flags & FC_RPORT_TGT_DELETE_PENDING)
+		scsi_flush_work(shost);
+
+	/*
 	 * Cancel any outstanding timers. These should really exist
 	 * only when rmmod'ing the LLDD and we're asking for
 	 * immediate termination of the rports
@@ -2573,8 +2585,10 @@ fc_rport_final_delete(struct work_struct *work)
 	spin_unlock_irqrestore(shost->host_lock, flags);
 
 	/* Delete SCSI target and sdevs */
-	if (rport->scsi_target_id != -1)
-		fc_starget_delete(&rport->stgt_delete_work);
+	if (rport->scsi_target_id != -1) {
+		scsi_remove_target(&rport->dev);
+		rport->scsi_target_id = -1;
+	}
 
 	/*
 	 * Notify the driver that the rport is now dead. The LLDD will
@@ -3149,6 +3163,7 @@ fc_timeout_deleted_rport(struct work_struct *work)
 		dev_printk(KERN_ERR, &rport->dev,
 			"blocked FC remote port time out: no longer"
 			" a FCP target, removing starget\n");
+		rport->flags |= FC_RPORT_TGT_DELETE_PENDING;
 		spin_unlock_irqrestore(shost->host_lock, flags);
 		scsi_target_unblock(&rport->dev, SDEV_TRANSPORT_OFFLINE);
 		fc_queue_work(shost, &rport->stgt_delete_work);
@@ -3235,6 +3250,7 @@ fc_timeout_deleted_rport(struct work_struct *work)
 		 * all attached scsi devices.
 		 */
 		rport->flags |= FC_RPORT_DEVLOSS_CALLBK_DONE;
+		rport->flags |= FC_RPORT_TGT_DELETE_PENDING;
 		spin_unlock_irqrestore(shost->host_lock, flags);
 		fc_queue_work(shost, &rport->stgt_delete_work);
 
diff --git a/include/scsi/scsi_transport_fc.h b/include/scsi/scsi_transport_fc.h
index 784bc2c..8dbcb62 100644
--- a/include/scsi/scsi_transport_fc.h
+++ b/include/scsi/scsi_transport_fc.h
@@ -365,6 +365,7 @@ struct fc_rport {	/* aka fc_starget_attrs */
 #define FC_RPORT_SCAN_PENDING		0x02
 #define FC_RPORT_FAST_FAIL_TIMEDOUT	0x04
 #define FC_RPORT_DEVLOSS_CALLBK_DONE	0x08
+#define FC_RPORT_TGT_DELETE_PENDING	0x10
 
 #define	dev_to_rport(d)				\
 	container_of(d, struct fc_rport, dev)
-- 
1.8.5.6

