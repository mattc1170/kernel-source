From: Christoph Hellwig <hch@lst.de>
Date: Mon, 2 May 2016 15:45:20 +0200
Subject: target: remove acl_stop
References: bsc#1019675,FATE#321701
Git-commit: fba81f8831b20272a97a990e5d47c332e9b1f65d
Patch-Mainline: v4.7-rc1

Ensure we can use list_empty on the sess_acl_list to remove the need for
this flag.

Signed-off-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 drivers/target/target_core_tpg.c       |   13 +++++--------
 drivers/target/target_core_transport.c |    4 ++--
 include/target/target_core_base.h      |    1 -
 3 files changed, 7 insertions(+), 11 deletions(-)

--- a/drivers/target/target_core_tpg.c
+++ b/drivers/target/target_core_tpg.c
@@ -336,30 +336,27 @@ struct se_node_acl *core_tpg_add_initiat
 	return acl;
 }
 
-static void target_shutdown_sessions(struct se_node_acl *acl, bool acl_stop)
+static void target_shutdown_sessions(struct se_node_acl *acl)
 {
 	struct se_session *sess;
 	unsigned long flags;
 	int ret;
 
-	spin_lock_irqsave(&acl->nacl_sess_lock, flags);
-	if (acl_stop)
-		acl->acl_stop = 1;
 restart:
+	spin_lock_irqsave(&acl->nacl_sess_lock, flags);
 	list_for_each_entry(sess, &acl->acl_sess_list, sess_acl_list) {
 		if (sess->sess_tearing_down)
 			continue;
 		if (!target_get_session(sess))
 			continue;
 
-		list_del(&sess->sess_acl_list);
+		list_del_init(&sess->sess_acl_list);
 
 		spin_unlock_irqrestore(&acl->nacl_sess_lock, flags);
 		ret = acl->se_tpg->se_tpg_tfo->shutdown_session(sess);
 		target_put_session(sess);
 		if (ret)
 			target_put_session(sess);
-		spin_lock_irqsave(&acl->nacl_sess_lock, flags);
 		goto restart;
 	}
 	spin_unlock_irqrestore(&acl->nacl_sess_lock, flags);
@@ -375,7 +372,7 @@ void core_tpg_del_initiator_node_acl(str
 	list_del_init(&acl->acl_list);
 	mutex_unlock(&tpg->acl_node_mutex);
 
-	target_shutdown_sessions(acl, true);
+	target_shutdown_sessions(acl);
 
 	target_put_nacl(acl);
 	/*
@@ -415,7 +412,7 @@ int core_tpg_set_initiator_node_queue_de
 	/*
 	 * Shutdown all pending sessions to force session reinstatement.
 	 */
-	target_shutdown_sessions(acl, false);
+	target_shutdown_sessions(acl);
 
 	pr_debug("Successfully changed queue depth to: %d for Initiator"
 		" Node: %s on %s Target Portal Group: %u\n", acl->queue_depth,
--- a/drivers/target/target_core_transport.c
+++ b/drivers/target/target_core_transport.c
@@ -511,8 +511,8 @@ void transport_deregister_session_config
 	se_nacl = se_sess->se_node_acl;
 	if (se_nacl) {
 		spin_lock_irqsave(&se_nacl->nacl_sess_lock, flags);
-		if (se_nacl->acl_stop == 0)
-			list_del(&se_sess->sess_acl_list);
+		if (!list_empty(&se_sess->sess_acl_list))
+			list_del_init(&se_sess->sess_acl_list);
 		/*
 		 * If the session list is empty, then clear the pointer.
 		 * Otherwise, set the struct se_session pointer from the tail
--- a/include/target/target_core_base.h
+++ b/include/target/target_core_base.h
@@ -547,7 +547,6 @@ struct se_node_acl {
 	char			initiatorname[TRANSPORT_IQN_LEN];
 	/* Used to signal demo mode created ACL, disabled by default */
 	bool			dynamic_node_acl;
-	bool			acl_stop:1;
 	bool			dynamic_stop;
 	u32			queue_depth;
 	u32			acl_index;
