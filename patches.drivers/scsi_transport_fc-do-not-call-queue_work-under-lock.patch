From: Hannes Reinecke <hare@suse.de>
Date: Wed, 29 Mar 2017 13:12:26 +0200
Subject: scsi_transport_fc: do not call queue_work under lock
References: bsc#1013887
Patch-Mainline: Not yet, under validation by customer

Calling queue_work under a spinlock is potentially dangerous,
as there is a chance that the work item is executed within the same
context. So if the work function is taking a lock (as this one does)
we will deadlock.

Signed-off-by: Hannes Reinecke <hare@suse.com>
---
 drivers/scsi/scsi_transport_fc.c | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/drivers/scsi/scsi_transport_fc.c b/drivers/scsi/scsi_transport_fc.c
index ddbfbf1..00703f7 100644
--- a/drivers/scsi/scsi_transport_fc.c
+++ b/drivers/scsi/scsi_transport_fc.c
@@ -1623,7 +1623,9 @@ store_fc_private_host_tgtid_bind_type(struct device *dev,
 				&fc_host_rport_bindings(shost), peers);
 			list_del(&rport->peers);
 			rport->port_state = FC_PORTSTATE_DELETED;
+			spin_unlock_irqrestore(shost->host_lock, flags);
 			fc_queue_work(shost, &rport->rport_delete_work);
+			spin_lock_irqsave(shost->host_lock, flags);
 		}
 		spin_unlock_irqrestore(shost->host_lock, flags);
 	}
@@ -2450,7 +2452,9 @@ fc_remove_host(struct Scsi_Host *shost)
 	list_for_each_entry_safe(vport, next_vport, &fc_host->vports, peers) {
 		list_del(&vport->peers);
 		vport->flags |= FC_VPORT_DELETING;
+		spin_unlock_irqrestore(shost->host_lock, flags);
 		fc_queue_work(shost, &vport->vport_delete_work);
+		spin_lock_irqsave(shost->host_lock, flags);
 	}
 
 	/* Remove any remote ports */
@@ -2458,14 +2462,18 @@ fc_remove_host(struct Scsi_Host *shost)
 			&fc_host->rports, peers) {
 		list_del(&rport->peers);
 		rport->port_state = FC_PORTSTATE_DELETED;
+		spin_unlock_irqrestore(shost->host_lock, flags);
 		fc_queue_work(shost, &rport->rport_delete_work);
+		spin_lock_irqsave(shost->host_lock, flags);
 	}
 
 	list_for_each_entry_safe(rport, next_rport,
 			&fc_host->rport_bindings, peers) {
 		list_del(&rport->peers);
 		rport->port_state = FC_PORTSTATE_DELETED;
+		spin_unlock_irqrestore(shost->host_lock, flags);
 		fc_queue_work(shost, &rport->rport_delete_work);
+		spin_lock_irqsave(shost->host_lock, flags);
 	}
 
 	spin_unlock_irqrestore(shost->host_lock, flags);
@@ -2515,6 +2523,7 @@ fc_starget_delete(struct work_struct *work)
 {
 	struct fc_rport *rport =
 		container_of(work, struct fc_rport, stgt_delete_work);
+	struct Scsi_Host *shost = rport_to_shost(rport);
 
 	fc_terminate_rport_io(rport);
 	scsi_remove_target(&rport->dev);
@@ -3164,8 +3173,8 @@ fc_timeout_deleted_rport(struct work_struct *work)
 			"blocked FC remote port time out: removing"
 			" rport%s\n",
 			(rport->scsi_target_id != -1) ?  " and starget" : "");
-		fc_queue_work(shost, &rport->rport_delete_work);
 		spin_unlock_irqrestore(shost->host_lock, flags);
+		fc_queue_work(shost, &rport->rport_delete_work);
 		return;
 	}
 
@@ -3226,12 +3235,12 @@ fc_timeout_deleted_rport(struct work_struct *work)
 		 * all attached scsi devices.
 		 */
 		rport->flags |= FC_RPORT_DEVLOSS_CALLBK_DONE;
+		spin_unlock_irqrestore(shost->host_lock, flags);
 		fc_queue_work(shost, &rport->stgt_delete_work);
 
 		do_callback = 1;
-	}
-
-	spin_unlock_irqrestore(shost->host_lock, flags);
+	} else
+		spin_unlock_irqrestore(shost->host_lock, flags);
 
 	/*
 	 * Notify the driver that the rport is now dead. The LLDD will
-- 
1.8.5.6

