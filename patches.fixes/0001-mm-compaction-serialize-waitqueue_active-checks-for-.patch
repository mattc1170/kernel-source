From e58271c163d09e0f0c27e05a4e924d4a44ccbb82 Mon Sep 17 00:00:00 2001
From: Davidlohr Bueso <dave@stgolabs.net>
Date: Thu, 12 Oct 2017 10:31:07 -0700
Subject: [PATCH] mm,compaction: serialize waitqueue_active() checks (for real)
Git-commit: 6818600ff094ca255a7fe31838ad50c29656c3c5
Patch-mainline: v4.14-rc3
References: bsc#971975

Andrea brought to my attention that the L->{L,S} guarantees are completely
bogus for this case.  I was looking at the diagram, from the offending
commit, when that _is_ the race, we had the load reordered already.

What we need is at least S->L semantics, thus simply use
smp_mb to serialize the call for good.

SLE: This is a SLE12 backport of:
	mm,compaction: serialize waitqueue_active() checks (for real) (6818600ff09)

Link: http://lkml.kernel.org/r/20170914175313.GB811@linux-80c1.suse
Fixes: 46acef048a6 (mm,compaction: serialize waitqueue_active() checks)
Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
Reported-by: Andrea Parri <parri.andrea@gmail.com>
Cc: Vlastimil Babka <vbabka@suse.cz>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

---
 mm/compaction.c | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/mm/compaction.c b/mm/compaction.c
index 6d8a7742eccb..f19d38c58ac4 100644
--- a/mm/compaction.c
+++ b/mm/compaction.c
@@ -1848,16 +1848,10 @@ void wakeup_kcompactd(pg_data_t *pgdat, int order, int classzone_idx)
 	if (pgdat->kcompactd_max_order < order)
 		pgdat->kcompactd_max_order = order;
 
-	/*
-	 * Pairs with implicit barrier in wait_event_freezable()
-	 * such that wakeups are not missed in the lockless
-	 * waitqueue_active() call.
-	 */
-	smp_acquire__after_ctrl_dep();
-
 	if (pgdat->kcompactd_classzone_idx > classzone_idx)
 		pgdat->kcompactd_classzone_idx = classzone_idx;
 
+	smp_mb();
 	if (!waitqueue_active(&pgdat->kcompactd_wait))
 		return;
 
-- 
2.12.0

