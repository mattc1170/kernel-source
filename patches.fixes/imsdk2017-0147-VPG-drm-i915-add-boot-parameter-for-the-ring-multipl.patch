From 686851ef66b4084ad6f6d3e62a462f19f289263f Mon Sep 17 00:00:00 2001
From: Zhipeng Gong <zhipeng.gong@intel.com>
Date: Wed, 23 Nov 2016 22:01:13 +0800
Subject: [PATCH 147/147] [VPG]: drm/i915: add boot parameter for the ring multiplier

Some customers hits the throttling when using 3:1 multiplier on
some SKUs. Add the parameter to allow the customer to configure
it by themselves.
---
 drivers/gpu/drm/i915/i915_drv.h    |    1 +
 drivers/gpu/drm/i915/i915_params.c |    4 ++++
 drivers/gpu/drm/i915/intel_pm.c    |   23 +++++++++++++++++++++--
 3 files changed, 26 insertions(+), 2 deletions(-)

Index: current/drivers/gpu/drm/i915/i915_drv.h
===================================================================
--- current.orig/drivers/gpu/drm/i915/i915_drv.h
+++ current/drivers/gpu/drm/i915/i915_drv.h
@@ -2810,6 +2810,7 @@ struct i915_params {
 	bool nuclear_pageflip;
 	int edp_vswing;
 	int enable_scheduler;
+	int ring_multiplier;
 };
 extern struct i915_params i915 __read_mostly;
 
Index: current/drivers/gpu/drm/i915/i915_params.c
===================================================================
--- current.orig/drivers/gpu/drm/i915/i915_params.c
+++ current/drivers/gpu/drm/i915/i915_params.c
@@ -56,6 +56,7 @@ struct i915_params i915 __read_mostly =
 	.enable_guc_submission = false,
 	.guc_log_level = -1,
 	.enable_scheduler = 1,
+	.ring_multiplier = 2,
 };
 
 module_param_named(modeset, i915.modeset, int, 0400);
@@ -200,3 +201,6 @@ MODULE_PARM_DESC(guc_log_level,
 
 module_param_named_unsafe(enable_scheduler, i915.enable_scheduler, int, 0600);
 MODULE_PARM_DESC(enable_scheduler, "Enable scheduler (0 = disable, 1 = enable [default])");
+
+module_param_named(ring_multiplier, i915.ring_multiplier, int, 0400);
+MODULE_PARM_DESC(ring_multiplier, "Configure Ring/GT multiplier for SKL. (2:multiplier is 2 (default), 3:multiplier is 3)");
Index: current/drivers/gpu/drm/i915/intel_pm.c
===================================================================
--- current.orig/drivers/gpu/drm/i915/intel_pm.c
+++ current/drivers/gpu/drm/i915/intel_pm.c
@@ -5036,6 +5036,14 @@ static void gen6_enable_rps(struct drm_d
 	intel_uncore_forcewake_put(dev_priv, FORCEWAKE_ALL);
 }
 
+static int sanitize_ring_multiplier(struct drm_device *dev, int ring_multiplier)
+{
+	if (ring_multiplier != 2 && ring_multiplier != 3)
+		return 2;
+
+	return ring_multiplier;
+}
+
 static void __gen6_update_ring_freq(struct drm_device *dev)
 {
 	struct drm_i915_private *dev_priv = dev->dev_private;
@@ -5071,6 +5079,9 @@ static void __gen6_update_ring_freq(stru
 		/* Convert GT frequency to 50 HZ units */
 		min_gpu_freq = dev_priv->rps.min_freq / GEN9_FREQ_SCALER;
 		max_gpu_freq = dev_priv->rps.max_freq / GEN9_FREQ_SCALER;
+
+		i915.ring_multiplier = sanitize_ring_multiplier(dev, i915.ring_multiplier);
+		DRM_INFO("The Ring/GT multiplier is %d\n", i915.ring_multiplier);
 	} else {
 		min_gpu_freq = dev_priv->rps.min_freq;
 		max_gpu_freq = dev_priv->rps.max_freq;
@@ -5087,10 +5098,15 @@ static void __gen6_update_ring_freq(stru
 
 		if (IS_SKYLAKE(dev)) {
 			/*
-			 * ring_freq = 3 * GT. ring_freq is in 100MHz units
+			 * Only 2 or 3 is allowed for the multiplier.
+			 * gpu_freq is in 50MHz units.
+			 * ring_freq is in 100MHz units.
 			 * No floor required for ring frequency on SKL.
 			 */
-			ring_freq = mult_frac(gpu_freq, 3, 2);
+			if (i915.ring_multiplier == 3)
+				ring_freq = mult_frac(gpu_freq, 3, 2);
+			else
+				ring_freq = gpu_freq;
 		} else if (INTEL_INFO(dev)->gen >= 8) {
 			/* max(2 * GT, DDR). NB: GT is 50MHz units */
 			ring_freq = max(min_ring_freq, gpu_freq);
@@ -5113,6 +5129,9 @@ static void __gen6_update_ring_freq(stru
 			ia_freq = DIV_ROUND_CLOSEST(ia_freq, 100);
 		}
 
+		DRM_DEBUG_DRIVER("gpu_freq=%d*50=%d ring_freq=%d*100=%d\n",
+			gpu_freq, gpu_freq * 50, ring_freq, ring_freq * 100);
+
 		sandybridge_pcode_write(dev_priv,
 					GEN6_PCODE_WRITE_MIN_FREQ_TABLE,
 					ia_freq << GEN6_PCODE_FREQ_IA_RATIO_SHIFT |
