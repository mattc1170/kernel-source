From 9d163b15964e4474395b3f95052f794cdb3ff7f7 Mon Sep 17 00:00:00 2001
From: Hong Liu <hong.liu@intel.com>
Date: Thu, 7 Jul 2016 17:05:40 +0800
Subject: [PATCH 136/143] drm/i915: add new context_create2 ioctl to share PPGTT

Add a new CONTEXT_CREATE2 ioctl which takes an existing context id as a
parameter. The newly created context will share PPGTT with the existing one.

With sharing ppgtt among different contexts, we need to defer the removing
of VMAs binding to the ppgtt, from context destroying time to ppgtt destroy
timing.

Change-Id: I073c726d74e0ae572602977d270db1cf96e1a017
Signed-off-by: Thomas Daniel <thomas.daniel@intel.com>
Signed-off-by: Hong Liu <hong.liu@intel.com>
---
 drivers/gpu/drm/i915/i915_dma.c         |    1 +
 drivers/gpu/drm/i915/i915_drv.h         |    2 +
 drivers/gpu/drm/i915/i915_gem_context.c |   96 +++++++++++++++++++------------
 drivers/gpu/drm/i915/i915_gem_gtt.c     |   18 ++++++
 include/uapi/drm/i915_drm.h             |   11 ++++
 5 files changed, 91 insertions(+), 37 deletions(-)

Index: current/drivers/gpu/drm/i915/i915_dma.c
===================================================================
--- current.orig/drivers/gpu/drm/i915/i915_dma.c
+++ current/drivers/gpu/drm/i915/i915_dma.c
@@ -1351,6 +1351,7 @@ const struct drm_ioctl_desc i915_ioctls[
 	DRM_IOCTL_DEF_DRV(I915_GET_SPRITE_COLORKEY, drm_noop, DRM_MASTER|DRM_CONTROL_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_WAIT, i915_gem_wait_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_CREATE, i915_gem_context_create_ioctl, DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_CREATE2, i915_gem_context_create2_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GEM_CONTEXT_DESTROY, i915_gem_context_destroy_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_REG_READ, i915_reg_read_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(I915_GET_RESET_STATS, i915_get_reset_stats_ioctl, DRM_RENDER_ALLOW),
Index: current/drivers/gpu/drm/i915/i915_drv.h
===================================================================
--- current.orig/drivers/gpu/drm/i915/i915_drv.h
+++ current/drivers/gpu/drm/i915/i915_drv.h
@@ -3310,6 +3310,8 @@ static inline bool i915_gem_context_is_d
 
 int i915_gem_context_create_ioctl(struct drm_device *dev, void *data,
 				  struct drm_file *file);
+int i915_gem_context_create2_ioctl(struct drm_device *dev, void *data,
+				   struct drm_file *file);
 int i915_gem_context_destroy_ioctl(struct drm_device *dev, void *data,
 				   struct drm_file *file);
 int i915_gem_context_getparam_ioctl(struct drm_device *dev, void *data,
Index: current/drivers/gpu/drm/i915/i915_gem_context.c
===================================================================
--- current.orig/drivers/gpu/drm/i915/i915_gem_context.c
+++ current/drivers/gpu/drm/i915/i915_gem_context.c
@@ -133,21 +133,6 @@ static int get_context_size(struct drm_d
 	return ret;
 }
 
-static void i915_gem_context_clean(struct intel_context *ctx)
-{
-	struct i915_hw_ppgtt *ppgtt = ctx->ppgtt;
-	struct i915_vma *vma, *next;
-
-	if (!ppgtt)
-		return;
-
-	list_for_each_entry_safe(vma, next, &ppgtt->base.inactive_list,
-				 mm_list) {
-		if (WARN_ON(__i915_vma_unbind_no_wait(vma)))
-			break;
-	}
-}
-
 static inline void i915_gem_context_boost_inc(struct intel_context *ctx)
 {
 	struct intel_gen6_power_mgmt *rps = &ctx->i915->rps;
@@ -173,13 +158,6 @@ void i915_gem_context_free(struct kref *
 	if (i915.enable_execlists)
 		intel_lr_context_free(ctx);
 
-	/*
-	 * This context is going away and we need to remove all VMAs still
-	 * around. This is to handle imported shared objects for which
-	 * destructor did not run when their handles were closed.
-	 */
-	i915_gem_context_clean(ctx);
-
 	i915_ppgtt_put(ctx->ppgtt);
 
 	if (ctx->legacy_hw_ctx.rcs_state)
@@ -286,7 +264,8 @@ err_out:
  */
 static struct intel_context *
 i915_gem_create_context(struct drm_device *dev,
-			struct drm_i915_file_private *file_priv)
+			struct drm_i915_file_private *file_priv,
+			struct i915_hw_ppgtt *ppgtt)
 {
 	const bool is_global_default_ctx = file_priv == NULL;
 	struct intel_context *ctx;
@@ -329,13 +308,17 @@ i915_gem_create_context(struct drm_devic
 	}
 
 	if (USES_FULL_PPGTT(dev)) {
-		struct i915_hw_ppgtt *ppgtt = i915_ppgtt_create(dev, file_priv);
-
-		if (IS_ERR_OR_NULL(ppgtt)) {
-			DRM_DEBUG_DRIVER("PPGTT setup failed (%ld)\n",
-					 PTR_ERR(ppgtt));
-			ret = PTR_ERR(ppgtt);
-			goto err_unpin;
+		if (ppgtt) {
+			i915_ppgtt_get(ppgtt);
+		} else {
+			ppgtt = i915_ppgtt_create(dev, file_priv);
+
+			if (IS_ERR_OR_NULL(ppgtt)) {
+				DRM_DEBUG_DRIVER("PPGTT setup failed (%ld)\n",
+						 PTR_ERR(ppgtt));
+				ret = PTR_ERR(ppgtt);
+				goto err_unpin;
+			}
 		}
 
 		ctx->ppgtt = ppgtt;
@@ -422,7 +405,7 @@ int i915_gem_context_init(struct drm_dev
 		}
 	}
 
-	ctx = i915_gem_create_context(dev, NULL);
+	ctx = i915_gem_create_context(dev, NULL, NULL);
 	if (IS_ERR(ctx)) {
 		DRM_ERROR("Failed to create default global context (error %ld)\n",
 			  PTR_ERR(ctx));
@@ -522,7 +505,7 @@ int i915_gem_context_open(struct drm_dev
 	idr_init(&file_priv->context_idr);
 
 	mutex_lock(&dev->struct_mutex);
-	ctx = i915_gem_create_context(dev, file_priv);
+	ctx = i915_gem_create_context(dev, file_priv, NULL);
 	mutex_unlock(&dev->struct_mutex);
 
 	if (IS_ERR(ctx)) {
@@ -894,8 +877,27 @@ int i915_gem_context_create_ioctl(struct
 				  struct drm_file *file)
 {
 	struct drm_i915_gem_context_create *args = data;
+	struct drm_i915_gem_context_create2 args2;
+	int ret;
+
+	if (!contexts_enabled(dev))
+		return -ENODEV;
+
+	memset(&args2, 0, sizeof(args2));
+
+	ret = i915_gem_context_create2_ioctl(dev, &args2, file);
+	args->ctx_id = args2.ctx_id;
+
+	return ret;
+}
+
+int i915_gem_context_create2_ioctl(struct drm_device *dev, void *data,
+				   struct drm_file *file)
+{
+	struct drm_i915_gem_context_create2 *args = data;
 	struct drm_i915_file_private *file_priv = file->driver_priv;
 	struct intel_context *ctx;
+	struct i915_hw_ppgtt *ppgtt = NULL;
 	int ret;
 
 	if (!contexts_enabled(dev))
@@ -905,15 +907,35 @@ int i915_gem_context_create_ioctl(struct
 	if (ret)
 		return ret;
 
-	ctx = i915_gem_create_context(dev, file_priv);
-	mutex_unlock(&dev->struct_mutex);
-	if (IS_ERR(ctx))
-		return PTR_ERR(ctx);
+	if (args->flags & I915_CTX_CREATE_SHARE_PPGTT) {
+		struct intel_context *share_ctx;
+
+		if (!USES_FULL_PPGTT(dev)) {
+			ret = -EINVAL;
+			goto out_unlock;
+		}
+
+		share_ctx = i915_gem_context_get(file_priv, args->svm_ctx_id);
+		if (IS_ERR(share_ctx)) {
+			ret = PTR_ERR(share_ctx);
+			goto out_unlock;
+		}
+
+		ppgtt = share_ctx->ppgtt;
+	}
+
+	ctx = i915_gem_create_context(dev, file_priv, ppgtt);
+	if (IS_ERR(ctx)) {
+		ret = PTR_ERR(ctx);
+		goto out_unlock;
+	}
 
 	args->ctx_id = ctx->user_handle;
 	DRM_DEBUG_DRIVER("HW context %d created\n", args->ctx_id);
 
-	return 0;
+out_unlock:
+	mutex_unlock(&dev->struct_mutex);
+	return ret;
 }
 
 int i915_gem_context_destroy_ioctl(struct drm_device *dev, void *data,
Index: current/drivers/gpu/drm/i915/i915_gem_gtt.c
===================================================================
--- current.orig/drivers/gpu/drm/i915/i915_gem_gtt.c
+++ current/drivers/gpu/drm/i915/i915_gem_gtt.c
@@ -2231,6 +2231,17 @@ i915_ppgtt_create(struct drm_device *dev
 	return ppgtt;
 }
 
+static void i915_gem_ppgtt_clean(struct i915_hw_ppgtt *ppgtt)
+{
+	struct i915_vma *vma, *next;
+
+	list_for_each_entry_safe(vma, next, &ppgtt->base.inactive_list,
+				 mm_list) {
+		if (WARN_ON(__i915_vma_unbind_no_wait(vma)))
+			break;
+	}
+}
+
 void  i915_ppgtt_release(struct kref *kref)
 {
 	struct i915_hw_ppgtt *ppgtt =
@@ -2238,6 +2249,13 @@ void  i915_ppgtt_release(struct kref *kr
 
 	trace_i915_ppgtt_release(&ppgtt->base);
 
+	/*
+	 * This ppgtt is going away and we need to remove all VMAs still
+	 * around. This is to handle imported shared objects for which
+	 * destructor did not run when their handles were closed.
+	 */
+	i915_gem_ppgtt_clean(ppgtt);
+
 	/* vmas should already be unbound */
 	WARN_ON(!list_empty(&ppgtt->base.active_list));
 	WARN_ON(!list_empty(&ppgtt->base.inactive_list));
Index: current/include/uapi/drm/i915_drm.h
===================================================================
--- current.orig/include/uapi/drm/i915_drm.h
+++ current/include/uapi/drm/i915_drm.h
@@ -231,6 +231,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_I915_GEM_USERPTR		0x33
 #define DRM_I915_GEM_CONTEXT_GETPARAM	0x34
 #define DRM_I915_GEM_CONTEXT_SETPARAM	0x35
+#define DRM_I915_GEM_CONTEXT_CREATE2	0x36
 #define DRM_I915_PERFMON		0x3e
 
 #define DRM_IOCTL_I915_INIT		DRM_IOW( DRM_COMMAND_BASE + DRM_I915_INIT, drm_i915_init_t)
@@ -279,6 +280,7 @@ typedef struct _drm_i915_sarea {
 #define DRM_IOCTL_I915_GET_SPRITE_COLORKEY DRM_IOWR(DRM_COMMAND_BASE + DRM_I915_GET_SPRITE_COLORKEY, struct drm_intel_sprite_colorkey)
 #define DRM_IOCTL_I915_GEM_WAIT		DRM_IOWR(DRM_COMMAND_BASE + DRM_I915_GEM_WAIT, struct drm_i915_gem_wait)
 #define DRM_IOCTL_I915_GEM_CONTEXT_CREATE	DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_CREATE, struct drm_i915_gem_context_create)
+#define DRM_IOCTL_I915_GEM_CONTEXT_CREATE2	DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_CREATE2, struct drm_i915_gem_context_create2)
 #define DRM_IOCTL_I915_GEM_CONTEXT_DESTROY	DRM_IOW (DRM_COMMAND_BASE + DRM_I915_GEM_CONTEXT_DESTROY, struct drm_i915_gem_context_destroy)
 #define DRM_IOCTL_I915_REG_READ			DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_REG_READ, struct drm_i915_reg_read)
 #define DRM_IOCTL_I915_GET_RESET_STATS		DRM_IOWR (DRM_COMMAND_BASE + DRM_I915_GET_RESET_STATS, struct drm_i915_reset_stats)
@@ -1102,6 +1104,15 @@ struct drm_i915_gem_context_create {
 	__u32 pad;
 };
 
+#define I915_CTX_CREATE_SHARE_PPGTT (1 << 0)
+struct drm_i915_gem_context_create2 {
+	__u32 ctx_id;
+	__u32 flags;
+	/* input: id of context to share PPGTT, 0 for default context */
+	__u32 svm_ctx_id;
+	__u32 pad;
+};
+
 struct drm_i915_gem_context_destroy {
 	__u32 ctx_id;
 	__u32 pad;
