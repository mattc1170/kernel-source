From 8866ae39d62c2fe88f9b66b58486f77377567301 Mon Sep 17 00:00:00 2001
From: Hong Liu <hong.liu@intel.com>
Date: Sat, 23 Jul 2016 14:25:53 +0800
Subject: [PATCH 141/143] [VPG]: drm/i915: fix flinked object VMA leak after sharing ppgtt

From commit e9f24d5fb7cf3628b195b18ff3ac4e37937ceeae
   drm/i915: clean up associated VMAs on context destruction

It is intended to fix the flinked object VMAs leak. Since the flink objects
will not be destroyed when importer closes the buffer object handle.
So the VMAs pinned to the ppgtt needs to be cleaned first,
otherwise the ppgtt will not be freed since the VMAs hold reference on it.

After sharing ppgtt among contexts, we can't just free all VMAs on the
inactive list of ppgtt when destroying context, since it may free VMAs
belong to other contexts.

So we add a new share counter to the ppgtt, let the last context
sharing the ppgtt to clean up the associated VMAs.

Signed-off-by: Hong Liu <hong.liu@intel.com>
---
 drivers/gpu/drm/i915/i915_gem_context.c |   25 +++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_gem_gtt.c     |   19 +------------------
 drivers/gpu/drm/i915/i915_gem_gtt.h     |    1 +
 3 files changed, 27 insertions(+), 18 deletions(-)

Index: linux-4.4/drivers/gpu/drm/i915/i915_gem_context.c
===================================================================
--- linux-4.4.orig/drivers/gpu/drm/i915/i915_gem_context.c
+++ linux-4.4/drivers/gpu/drm/i915/i915_gem_context.c
@@ -133,6 +133,21 @@ static int get_context_size(struct drm_d
 	return ret;
 }
 
+static void i915_gem_context_clean(struct intel_context *ctx)
+{
+	struct i915_hw_ppgtt *ppgtt = ctx->ppgtt;
+	struct i915_vma *vma, *next;
+
+	if (!ppgtt)
+		return;
+
+	list_for_each_entry_safe(vma, next, &ppgtt->base.inactive_list,
+				 mm_list) {
+		if (WARN_ON(__i915_vma_unbind_no_wait(vma)))
+			break;
+	}
+}
+
 static inline void i915_gem_context_boost_inc(struct intel_context *ctx)
 {
 	struct intel_gen6_power_mgmt *rps = &ctx->i915->rps;
@@ -158,6 +173,14 @@ void i915_gem_context_free(struct kref *
 	if (i915.enable_execlists)
 		intel_lr_context_free(ctx);
 
+	/*
+	 * All the contexts sharing the ppgtt are going away and
+	 * we need to remove all VMAs still around. This is to handle
+	 * imported shared objects for which destructor did not run
+	 * when their handles were closed.
+	 */
+	if (ctx->ppgtt && (--ctx->ppgtt->share_cnt == 0))
+		i915_gem_context_clean(ctx);
 	i915_ppgtt_put(ctx->ppgtt);
 
 	if (ctx->legacy_hw_ctx.rcs_state)
@@ -930,6 +953,8 @@ int i915_gem_context_create2_ioctl(struc
 		goto out_unlock;
 	}
 
+	if (ppgtt)
+		ppgtt->share_cnt++;
 	args->ctx_id = ctx->user_handle;
 	DRM_DEBUG_DRIVER("HW context %d created\n", args->ctx_id);
 
Index: linux-4.4/drivers/gpu/drm/i915/i915_gem_gtt.c
===================================================================
--- linux-4.4.orig/drivers/gpu/drm/i915/i915_gem_gtt.c
+++ linux-4.4/drivers/gpu/drm/i915/i915_gem_gtt.c
@@ -2163,6 +2163,7 @@ int i915_ppgtt_init(struct drm_device *d
 	ret = __hw_ppgtt_init(dev, ppgtt);
 	if (ret == 0) {
 		kref_init(&ppgtt->ref);
+		ppgtt->share_cnt = 1;
 		i915_address_space_init(&ppgtt->base, dev_priv);
 	}
 
@@ -2231,17 +2232,6 @@ i915_ppgtt_create(struct drm_device *dev
 	return ppgtt;
 }
 
-static void i915_gem_ppgtt_clean(struct i915_hw_ppgtt *ppgtt)
-{
-	struct i915_vma *vma, *next;
-
-	list_for_each_entry_safe(vma, next, &ppgtt->base.inactive_list,
-				 mm_list) {
-		if (WARN_ON(__i915_vma_unbind_no_wait(vma)))
-			break;
-	}
-}
-
 void  i915_ppgtt_release(struct kref *kref)
 {
 	struct i915_hw_ppgtt *ppgtt =
@@ -2249,13 +2239,6 @@ void  i915_ppgtt_release(struct kref *kr
 
 	trace_i915_ppgtt_release(&ppgtt->base);
 
-	/*
-	 * This ppgtt is going away and we need to remove all VMAs still
-	 * around. This is to handle imported shared objects for which
-	 * destructor did not run when their handles were closed.
-	 */
-	i915_gem_ppgtt_clean(ppgtt);
-
 	/* vmas should already be unbound */
 	WARN_ON(!list_empty(&ppgtt->base.active_list));
 	WARN_ON(!list_empty(&ppgtt->base.inactive_list));
Index: linux-4.4/drivers/gpu/drm/i915/i915_gem_gtt.h
===================================================================
--- linux-4.4.orig/drivers/gpu/drm/i915/i915_gem_gtt.h
+++ linux-4.4/drivers/gpu/drm/i915/i915_gem_gtt.h
@@ -365,6 +365,7 @@ struct i915_gtt {
 struct i915_hw_ppgtt {
 	struct i915_address_space base;
 	struct kref ref;
+	unsigned int share_cnt;
 	struct drm_mm_node node;
 	unsigned long pd_dirty_rings;
 	union {
