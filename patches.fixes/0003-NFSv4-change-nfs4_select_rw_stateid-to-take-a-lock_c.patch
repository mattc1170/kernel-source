From: NeilBrown <neilb@suse.com>
Date: Wed, 5 Oct 2016 16:14:33 +1100
Subject: [PATCH] NFSv4: change nfs4_select_rw_stateid to take a lock_context
 inplace of lock_owner
Patch-mainline: v4.10
Git-commit: 1739347549653dc2463d208d7039f5e97b8f1e8b
References: bnc#998689

The only time that a lock_context is not immediately available is in
setattr, and now that it has an open_context, it can easily find one
with nfs_get_lock_context.
This removes the need for the on-stack nfs_lockowner.

This change is preparation for correctly support flock stateids.

Reviewed-by: Jeff Layton <jlayton@redhat.com>
Signed-off-by: NeilBrown <neilb@suse.com>
---
 fs/nfs/nfs4_fs.h   |    2 +-
 fs/nfs/nfs4proc.c  |   27 ++++++++++++++-------------
 fs/nfs/nfs4state.c |   11 +++++------
 3 files changed, 20 insertions(+), 20 deletions(-)

--- a/fs/nfs/nfs4_fs.h
+++ b/fs/nfs/nfs4_fs.h
@@ -446,7 +446,7 @@ extern void nfs41_handle_server_scope(st
 extern void nfs4_put_lock_state(struct nfs4_lock_state *lsp);
 extern int nfs4_set_lock_state(struct nfs4_state *state, struct file_lock *fl);
 extern int nfs4_select_rw_stateid(nfs4_stateid *, struct nfs4_state *,
-		fmode_t, const struct nfs_lockowner *);
+		fmode_t, const struct nfs_lock_context *);
 
 extern struct nfs_seqid *nfs_alloc_seqid(struct nfs_seqid_counter *counter, gfp_t gfp_mask);
 extern int nfs_wait_on_sequence(struct nfs_seqid *seqid, struct rpc_task *task);
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -2688,15 +2688,20 @@ static int _nfs4_do_setattr(struct inode
 	if (nfs4_copy_delegation_stateid(&arg.stateid, inode, fmode)) {
 		/* Use that stateid */
 	} else if (truncate && ctx != NULL) {
-		struct nfs_lockowner lockowner = {
-			.l_owner = current->files,
-			.l_pid = current->tgid,
-		};
+		struct nfs_lock_context *l_ctx;
+		l_ctx = nfs_get_lock_context(ctx);
+		if (IS_ERR(l_ctx))
+			return PTR_ERR(l_ctx);
 		if (!nfs4_valid_open_stateid(ctx->state))
-			return -EBADF;
-		if (nfs4_select_rw_stateid(&arg.stateid, ctx->state, FMODE_WRITE,
-				&lockowner) == -EIO)
-			return -EBADF;
+			status = -EBADF;
+		else if (nfs4_select_rw_stateid(&arg.stateid, ctx->state, FMODE_WRITE,
+				l_ctx) == -EIO)
+			status = -EBADF;
+		else
+			status = 0;
+		nfs_put_lock_context(l_ctx);
+		if (status)
+			return status;
 	} else
 		nfs4_stateid_copy(&arg.stateid, &zero_stateid);
 
@@ -4272,11 +4277,7 @@ int nfs4_set_rw_stateid(nfs4_stateid *st
 		const struct nfs_lock_context *l_ctx,
 		fmode_t fmode)
 {
-	const struct nfs_lockowner *lockowner = NULL;
-
-	if (l_ctx != NULL)
-		lockowner = &l_ctx->lockowner;
-	return nfs4_select_rw_stateid(stateid, ctx->state, fmode, lockowner);
+	return nfs4_select_rw_stateid(stateid, ctx->state, fmode, l_ctx);
 }
 EXPORT_SYMBOL_GPL(nfs4_set_rw_stateid);
 
--- a/fs/nfs/nfs4state.c
+++ b/fs/nfs/nfs4state.c
@@ -939,20 +939,19 @@ int nfs4_set_lock_state(struct nfs4_stat
 
 static int nfs4_copy_lock_stateid(nfs4_stateid *dst,
 		struct nfs4_state *state,
-		const struct nfs_lockowner *lockowner)
+		const struct nfs_lock_context *l_ctx)
 {
 	struct nfs4_lock_state *lsp;
 	fl_owner_t fl_owner;
 	int ret = -ENOENT;
 
-
-	if (lockowner == NULL)
+	if (l_ctx == NULL)
 		goto out;
 
 	if (test_bit(LK_STATE_IN_USE, &state->flags) == 0)
 		goto out;
 
-	fl_owner = lockowner->l_owner;
+	fl_owner = l_ctx->lockowner.l_owner;
 	spin_lock(&state->state_lock);
 	lsp = __nfs4_find_lock_state(state, fl_owner);
 	if (lsp && test_bit(NFS_LOCK_LOST, &lsp->ls_flags))
@@ -986,9 +985,9 @@ static void nfs4_copy_open_stateid(nfs4_
  * requests.
  */
 int nfs4_select_rw_stateid(nfs4_stateid *dst, struct nfs4_state *state,
-		fmode_t fmode, const struct nfs_lockowner *lockowner)
+		fmode_t fmode, const struct nfs_lock_context *l_ctx)
 {
-	int ret = nfs4_copy_lock_stateid(dst, state, lockowner);
+	int ret = nfs4_copy_lock_stateid(dst, state, l_ctx);
 	if (ret == -EIO)
 		/* A lost lock - don't even consider delegations */
 		goto out;
