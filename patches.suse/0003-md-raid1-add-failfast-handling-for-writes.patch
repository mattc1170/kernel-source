From: NeilBrown <neilb@suse.de>
Date: Thu, 24 Nov 2011 14:19:21 +1100
Subject: [PATCH 3/5] md/raid1 - add failfast handling for writes.
References: Fate#311379
Git-commit: 212e7eb7a3403464a796c05c2fc46cae3b62d803
Patch-mainline: v4.10

When writing to a fastfail device we use REQ_FASTFAIL_DEV unless it is
the only device being written to.
For resync/recovery assume there was a working device to read from so
always use REQ_FASTFAIL_DEV.

If a write for resync/recovery fails we just fail the device - there
is not much else to do.

If a normal write fail but the device cannot be failed (must be only
one left) we queue for write error handling.

Signed-off-by: NeilBrown <neilb@suse.de>
---
 drivers/md/raid1.c |   27 ++++++++++++++++++++++++++-
 1 file changed, 26 insertions(+), 1 deletion(-)

--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -413,8 +413,10 @@ static void raid1_end_write_request(stru
 	int mirror, behind = test_bit(R1BIO_BehindIO, &r1_bio->state);
 	struct r1conf *conf = r1_bio->mddev->private;
 	struct bio *to_put = NULL;
+	struct md_rdev *rdev;
 
 	mirror = find_bio_disk(r1_bio, bio);
+	rdev = conf->mirrors[mirror].rdev;
 
 	/*
 	 * 'one mirror IO has finished' event handler:
@@ -427,7 +429,23 @@ static void raid1_end_write_request(stru
 			set_bit(MD_RECOVERY_NEEDED, &
 				conf->mddev->recovery);
 
-		set_bit(R1BIO_WriteError, &r1_bio->state);
+		if (test_bit(FailFast, &rdev->flags) &&
+		    /* We never try FailFast to WriteMostly devices */
+		    !test_bit(WriteMostly, &rdev->flags)) {
+			md_error(r1_bio->mddev, rdev);
+			if (!test_bit(Faulty, &rdev->flags))
+				/* This is the only remaining device,
+				 * We need to retry the write without
+				 * FailFast
+				 */
+				set_bit(R1BIO_WriteError, &r1_bio->state);
+			else {
+				/* Finished with this branch */
+				r1_bio->bios[mirror] = NULL;
+				to_put = bio;
+			}
+		} else
+			set_bit(R1BIO_WriteError, &r1_bio->state);
 	} else {
 		/*
 		 * Set R1BIO_Uptodate in our master bio, so that we
@@ -1394,6 +1412,10 @@ read_again:
 		mbio->bi_end_io	= raid1_end_write_request;
 		mbio->bi_rw =
 			WRITE | do_flush_fua | do_sync | do_discard | do_same;
+		if (test_bit(FailFast, &conf->mirrors[i].rdev->flags) &&
+		    !test_bit(WriteMostly, &conf->mirrors[i].rdev->flags) &&
+		    conf->raid_disks - mddev->degraded > 1)
+			mbio->bi_rw |= REQ_FAILFAST_DEV;
 		mbio->bi_private = r1_bio;
 
 		atomic_inc(&r1_bio->remaining);
@@ -2060,6 +2082,9 @@ static void sync_request_write(struct md
 			continue;
 
 		wbio->bi_rw = WRITE;
+		if (test_bit(FailFast, &conf->mirrors[i].rdev->flags))
+			wbio->bi_rw |= REQ_FAILFAST_DEV;
+
 		wbio->bi_end_io = end_sync_write;
 		atomic_inc(&r1_bio->remaining);
 		md_sync_acct(conf->mirrors[i].rdev->bdev, bio_sectors(wbio));
