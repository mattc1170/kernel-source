From eab917fc36a7ca4cec278cdc65351dd2b449b6b6 Mon Sep 17 00:00:00 2001
From: Petr Mladek <pmladek@suse.com>
Date: Thu, 30 Mar 2017 14:16:54 +0200
Subject: [PATCH 2/2] kgr: Mark eeh_event_handler() kthread safe using a
 timeout
Patch-mainline: Not yet, depends on kthread migration method used by upstream livepatching
References: bsc#1031662

The eeh_event_handler() blocks kGraft migration because
it sleeps in down_interruptible() and ignores the wakeups.

We need to wait with a timeout. When the timeout is out,
we could migrate the kthread and wait again.

Signed-off-by: Petr Mladek <pmladek@suse.com>
Reviewed-by: Miroslav Benes <mbenes@suse.cz>
Tested-by: Torsten Duwe <duwe@suse.de>
---
 arch/powerpc/kernel/eeh_event.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/arch/powerpc/kernel/eeh_event.c b/arch/powerpc/kernel/eeh_event.c
index e50a8abf3bb4..929295e3fa70 100644
--- a/arch/powerpc/kernel/eeh_event.c
+++ b/arch/powerpc/kernel/eeh_event.c
@@ -55,9 +55,14 @@ static int eeh_event_handler(void * dummy)
 	struct eeh_pe *pe;
 
 	while (!kthread_should_stop()) {
-		klp_kgraft_mark_task_safe(current);
+		int ret;
 
-		if (down_interruptible(&eeh_eventlist_sem))
+		klp_kgraft_mark_task_safe(current);
+		ret = down_interruptible_timeout(&eeh_eventlist_sem,
+						 HZ * 3);
+		if (ret == -ETIME)
+			continue;
+		if (ret)
 			break;
 
 		/* Fetch EEH event from the queue */
-- 
1.8.5.6

