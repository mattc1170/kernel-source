From 3bc546c63188f19a384aa44f231e6fcdf83232f1 Mon Sep 17 00:00:00 2001
From: Miroslav Benes <mbenes@suse.cz>
Date: Mon, 2 Jan 2017 17:29:02 +0100
Subject: [PATCH] kgraft/xen: Do not block kGraft in xenbus kthread
Patch-mainline: not yet, kgraft
References: bsc#1017410, fate#313296

There is a wait_event_interruptible() call in xb_wait_for_data_to_read()
which is a part of xenbus kthread. It blocks the kthread until data are
available for reading. As it is not that deep in the call chain, mark it
with klp_kgraft_mark_task_safe().

Let's do it carefully though. xb_wait_for_data_to_read() is called
thrice in process_msg(). Once directly and twice through xb_read(). Only
first call could block theoretically. It checks if there is anything to
read. If not, it blocks. If there is, process_msg() goes on and the other
two calls are executed. There should be no blocking at all. Only if
something bad happens. The problem is that there is more context present
when the other two calls happen. It could be risky to migrate the
kthread then.

Thus we duplicate xb_wait_for_data_to_read() to
xb_wait_for_data_to_read_kgraft() and annotate only that one. Leave the
other two case as they are. There should not be a need to annotate them.

Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Miroslav Benes <mbenes@suse.cz>
---
 drivers/xen/xenbus/xenbus_comms.c |    7 +++++++
 drivers/xen/xenbus/xenbus_comms.h |    1 +
 drivers/xen/xenbus/xenbus_xs.c    |    2 +-
 3 files changed, 9 insertions(+), 1 deletion(-)

--- a/drivers/xen/xenbus/xenbus_comms.c
+++ b/drivers/xen/xenbus/xenbus_comms.c
@@ -151,6 +151,13 @@ int xb_wait_for_data_to_read(void)
 	return wait_event_interruptible(xb_waitq, xb_data_to_read());
 }
 
+int xb_wait_for_data_to_read_kgraft(void)
+{
+	return wait_event_interruptible(xb_waitq, ({
+				klp_kgraft_mark_task_safe(current);
+				xb_data_to_read(); }));
+}
+
 int xb_read(void *data, unsigned len)
 {
 	struct xenstore_domain_interface *intf = xen_store_interface;
--- a/drivers/xen/xenbus/xenbus_comms.h
+++ b/drivers/xen/xenbus/xenbus_comms.h
@@ -42,6 +42,7 @@ int xb_write(const void *data, unsigned
 int xb_read(void *data, unsigned len);
 int xb_data_to_read(void);
 int xb_wait_for_data_to_read(void);
+int xb_wait_for_data_to_read_kgraft(void);
 int xs_input_avail(void);
 extern struct xenstore_domain_interface *xen_store_interface;
 extern int xen_store_evtchn;
--- a/drivers/xen/xenbus/xenbus_xs.c
+++ b/drivers/xen/xenbus/xenbus_xs.c
@@ -813,7 +813,7 @@ static int process_msg(void)
 	 * A partial read across s/r leaves us out of sync with xenstored.
 	 */
 	for (;;) {
-		err = xb_wait_for_data_to_read();
+		err = xb_wait_for_data_to_read_kgraft();
 		if (err)
 			return err;
 		mutex_lock(&xs_state.response_mutex);
