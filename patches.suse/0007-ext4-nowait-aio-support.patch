From 0c5d1419a903ab14cd59646e3ff748aa1f7a961c Mon Sep 17 00:00:00 2001
From: Goldwyn Rodrigues <rgoldwyn@suse.com>
Date: Mon, 22 May 2017 11:44:11 -0500
Subject: [PATCH 07/10] ext4: nowait aio support
Git-commit: 728fbc0e10b7f3ce2ee043b32e3453fd5201c055
References: FATE#321994
Patch-mainline: 4.13-rc1


Return EAGAIN if any of the following checks fail for direct I/O:
  + i_rwsem is lockable
  + Writing beyond end of file (will trigger allocation)
  + Blocks are not allocated at the write location

Signed-off-by: Goldwyn Rodrigues <rgoldwyn@suse.com>
---
 fs/ext4/file.c | 27 ++++++++++++++++++++++-----
 1 file changed, 22 insertions(+), 5 deletions(-)

diff --git a/fs/ext4/file.c b/fs/ext4/file.c
index dfa44b4309f1..0202a5e2a5dd 100644
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -113,7 +113,14 @@ ext4_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
 		ext4_unwritten_wait(inode);
 	}
 
-	mutex_lock(&inode->i_mutex);
+	if (!mutex_trylock(&inode->i_mutex)) {
+		if (iocb->ki_flags & IOCB_NOWAIT) {
+			ret =  -EAGAIN;
+			goto unlock_aio_mutex;
+		}
+		mutex_lock(&inode->i_mutex);
+	}
+
 	ret = generic_write_checks(iocb, from);
 	if (ret <= 0)
 		goto out;
@@ -139,8 +146,8 @@ ext4_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
 		blk_start_plug(&plug);
 
 		/* check whether we do a DIO overwrite or not */
-		if (ext4_should_dioread_nolock(inode) && !aio_mutex &&
-		    !file->f_mapping->nrpages && pos + length <= i_size_read(inode)) {
+		if (!aio_mutex && !file->f_mapping->nrpages &&
+		    pos + length <= i_size_read(inode)) {
 			struct ext4_map_blocks map;
 			unsigned int blkbits = inode->i_blkbits;
 			int err, len;
@@ -163,8 +170,13 @@ ext4_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
 			 * non-flags are returned.  So we should check
 			 * these two conditions.
 			 */
-			if (err == len && (map.m_flags & EXT4_MAP_MAPPED))
-				overwrite = 1;
+			if (err == len && (map.m_flags & EXT4_MAP_MAPPED)) {
+				if (ext4_should_dioread_nolock(inode))
+					overwrite = 1;
+			} else if (iocb->ki_flags & IOCB_NOWAIT) {
+				ret = -EAGAIN;
+				goto out;
+			}
 		}
 	}
 
@@ -182,6 +194,7 @@ ext4_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
 
 out:
 	mutex_unlock(&inode->i_mutex);
+unlock_aio_mutex:
 	if (aio_mutex)
 		mutex_unlock(aio_mutex);
 	return ret;
@@ -382,6 +395,10 @@ static int ext4_file_open(struct inode * inode, struct file * filp)
 		if (ret < 0)
 			return ret;
 	}
+
+	/* Set the flags to support nowait AIO */
+	filp->f_mode |= FMODE_AIO_NOWAIT;
+
 	return dquot_file_open(inode, filp);
 }
 
-- 
2.13.1

