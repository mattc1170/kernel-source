From 6a70df4eb1975ef69e4889ef8a92311033eeaf1b Mon Sep 17 00:00:00 2001
From: Petr Mladek <pmladek@suse.com>
Date: Thu, 30 Mar 2017 14:02:16 +0200
Subject: [PATCH 1/2] locking/semaphore: Add down_interruptible_timeout()
Patch-mainline: Not yet, depends on kthread migration method used by upstream livepatching
References: bsc#1031662

There is a need to use down_interruptible_timeout() in
eeh_event_handler() kthread.

__down_common() already supports this mode. This patch just adds
the appropriate wrappers.

Signed-off-by: Petr Mladek <pmladek@suse.com>
Reviewed-by: Miroslav Benes <mbenes@suse.cz>
Tested-by: Torsten Duwe <duwe@suse.de>
---
 include/linux/semaphore.h  |  2 ++
 kernel/locking/semaphore.c | 36 ++++++++++++++++++++++++++++++++++++
 2 files changed, 38 insertions(+)

diff --git a/include/linux/semaphore.h b/include/linux/semaphore.h
index 304fb100dea8..ce97a764c982 100644
--- a/include/linux/semaphore.h
+++ b/include/linux/semaphore.h
@@ -41,6 +41,8 @@ extern int __must_check down_interruptible(struct semaphore *sem);
 extern int __must_check down_killable(struct semaphore *sem);
 extern int __must_check down_trylock(struct semaphore *sem);
 extern int __must_check down_timeout(struct semaphore *sem, long jiffies);
+extern int __must_check down_interruptible_timeout(struct semaphore *sem,
+						    long jiffies);
 extern void up(struct semaphore *sem);
 
 #endif /* __LINUX_SEMAPHORE_H */
diff --git a/kernel/locking/semaphore.c b/kernel/locking/semaphore.c
index 6815171a4fff..96c29a0d6c48 100644
--- a/kernel/locking/semaphore.c
+++ b/kernel/locking/semaphore.c
@@ -37,6 +37,8 @@ static noinline void __down(struct semaphore *sem);
 static noinline int __down_interruptible(struct semaphore *sem);
 static noinline int __down_killable(struct semaphore *sem);
 static noinline int __down_timeout(struct semaphore *sem, long timeout);
+static noinline int __down_interruptible_timeout(struct semaphore *sem,
+						 long timeout);
 static noinline void __up(struct semaphore *sem);
 
 /**
@@ -169,6 +171,34 @@ int down_timeout(struct semaphore *sem, long timeout)
 EXPORT_SYMBOL(down_timeout);
 
 /**
+ * down_interruptible_timeout - acquire the semaphore within a specified time
+ *	unless interrupted
+ * @sem: the semaphore to be acquired
+ * @timeout: how long to wait before failing
+ *
+ * Attempts to acquire the semaphore.  If no more tasks are allowed to
+ * acquire the semaphore, calling this function will put the task to sleep.
+ * If the sleep is interrupted by a signal, this function will return -EINTR.
+ * If the semaphore is not released within the specified number of jiffies,
+ * this function returns -ETIME.  It returns 0 if the semaphore was acquired.
+ */
+int down_interruptible_timeout(struct semaphore *sem, long timeout)
+{
+	unsigned long flags;
+	int result = 0;
+
+	raw_spin_lock_irqsave(&sem->lock, flags);
+	if (likely(sem->count > 0))
+		sem->count--;
+	else
+		result = __down_interruptible_timeout(sem, timeout);
+	raw_spin_unlock_irqrestore(&sem->lock, flags);
+
+	return result;
+}
+EXPORT_SYMBOL(down_interruptible_timeout);
+
+/**
  * up - release the semaphore
  * @sem: the semaphore to release
  *
@@ -253,6 +283,12 @@ static noinline int __sched __down_timeout(struct semaphore *sem, long timeout)
 	return __down_common(sem, TASK_UNINTERRUPTIBLE, timeout);
 }
 
+static noinline int __sched __down_interruptible_timeout(struct semaphore *sem,
+							 long timeout)
+{
+	return __down_common(sem, TASK_INTERRUPTIBLE, timeout);
+}
+
 static noinline void __sched __up(struct semaphore *sem)
 {
 	struct semaphore_waiter *waiter = list_first_entry(&sem->wait_list,
-- 
1.8.5.6

