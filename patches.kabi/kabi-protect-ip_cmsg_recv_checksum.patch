From: Jiri Slaby <jslaby@suse.cz>
Subject: kABI: restore ip_cmsg_recv_offset parameters
Patch-mainline: never, kabi
References: kabi

In 4.4.32, commit d46c76765da696502837d823227d4c32c28d8c05 (udp: fix
IP_CHECKSUM handling), upstream commit
10df8e6152c6c400a563a673e9956320bfce1871
added one parameter to ip_cmsg_recv_offset and it indeed changed kABI.

Rename the new version to ip_cmsg_recv_offset4, and define
ip_cmsg_recv_offset with old parameters. The latter is now a wrapper
to the former.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/net/ip.h       |    5 +++--
 net/ipv4/ip_sockglue.c |    8 +++++++-
 net/ipv4/udp.c         |    2 +-
 net/ipv6/udp.c         |    2 +-
 4 files changed, 12 insertions(+), 5 deletions(-)

--- a/include/net/ip.h
+++ b/include/net/ip.h
@@ -553,7 +553,8 @@ int ip_options_rcv_srr(struct sk_buff *s
  */
 
 void ipv4_pktinfo_prepare(const struct sock *sk, struct sk_buff *skb);
-void ip_cmsg_recv_offset(struct msghdr *msg, struct sk_buff *skb, int tlen, int offset);
+void ip_cmsg_recv_offset(struct msghdr *msg, struct sk_buff *skb, int offset);
+void ip_cmsg_recv_offset4(struct msghdr *msg, struct sk_buff *skb, int tlen, int offset);
 int ip_cmsg_send(struct net *net, struct msghdr *msg,
 		 struct ipcm_cookie *ipc, bool allow_ipv6);
 int ip_setsockopt(struct sock *sk, int level, int optname, char __user *optval,
@@ -575,7 +576,7 @@ void ip_local_error(struct sock *sk, int
 
 static inline void ip_cmsg_recv(struct msghdr *msg, struct sk_buff *skb)
 {
-	ip_cmsg_recv_offset(msg, skb, 0, 0);
+	ip_cmsg_recv_offset4(msg, skb, 0, 0);
 }
 
 bool icmp_global_allow(void);
--- a/net/ipv4/ip_sockglue.c
+++ b/net/ipv4/ip_sockglue.c
@@ -153,7 +153,7 @@ static void ip_cmsg_recv_dstaddr(struct
 	put_cmsg(msg, SOL_IP, IP_ORIGDSTADDR, sizeof(sin), &sin);
 }
 
-void ip_cmsg_recv_offset(struct msghdr *msg, struct sk_buff *skb,
+void ip_cmsg_recv_offset4(struct msghdr *msg, struct sk_buff *skb,
 			 int tlen, int offset)
 {
 	struct inet_sock *inet = inet_sk(skb->sk);
@@ -219,6 +219,12 @@ void ip_cmsg_recv_offset(struct msghdr *
 	if (flags & IP_CMSG_CHECKSUM)
 		ip_cmsg_recv_checksum(msg, skb, tlen, offset);
 }
+EXPORT_SYMBOL(ip_cmsg_recv_offset4);
+
+void ip_cmsg_recv_offset(struct msghdr *msg, struct sk_buff *skb, int offset)
+{
+	ip_cmsg_recv_offset4(msg, skb, 0, offset);
+}
 EXPORT_SYMBOL(ip_cmsg_recv_offset);
 
 int ip_cmsg_send(struct net *net, struct msghdr *msg, struct ipcm_cookie *ipc,
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@ -1342,7 +1342,7 @@ try_again:
 		*addr_len = sizeof(*sin);
 	}
 	if (inet->cmsg_flags)
-		ip_cmsg_recv_offset(msg, skb, sizeof(struct udphdr), off);
+		ip_cmsg_recv_offset4(msg, skb, sizeof(struct udphdr), off);
 
 	err = copied;
 	if (flags & MSG_TRUNC)
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@ -498,7 +498,7 @@ try_again:
 
 	if (is_udp4) {
 		if (inet->cmsg_flags)
-			ip_cmsg_recv_offset(msg, skb,
+			ip_cmsg_recv_offset4(msg, skb,
 					    sizeof(struct udphdr), off);
 	} else {
 		if (np->rxopt.all)
