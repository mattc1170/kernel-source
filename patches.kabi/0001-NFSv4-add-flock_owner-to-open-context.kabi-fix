From: NeilBrown <neilb@suse.de>
Subject: Fix kabi change cause by adding flock_owner to open_context
References: bsc#998689
Patch-mainline: Never, kabi

1/ move new field to end of structure and hide from genksyms
 As a function is provided to allocate this structure, no module
 should allocate it directly
2/ move initialization out of that exported function so that the
  signature doesn't need to change.  Initialzing it in
  nfs_file_set_open_context is probably enough, but initializing elsewhere
  is extra-safe.

Signed-off-by: NeilBrown <neilb@suse.com>

---
 fs/nfs/dir.c           |    5 ++++-
 fs/nfs/inode.c         |    8 ++++----
 fs/nfs/nfs4file.c      |    3 ++-
 fs/nfs/nfs4proc.c      |    2 +-
 include/linux/nfs_fs.h |    6 ++++--
 5 files changed, 15 insertions(+), 9 deletions(-)

--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -1446,7 +1446,10 @@ static fmode_t flags_to_mode(int flags)
 
 static struct nfs_open_context *create_nfs_open_context(struct dentry *dentry, int open_flags, struct file *filp)
 {
-	return alloc_nfs_open_context(dentry, flags_to_mode(open_flags), filp);
+	struct nfs_open_context *ctx = alloc_nfs_open_context(dentry, flags_to_mode(open_flags));
+	if (!IS_ERR_OR_NULL(ctx))
+		ctx->flock_owner = (fl_owner_t)filp;
+	return ctx;
 }
 
 static int do_open(struct inode *inode, struct file *filp)
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@ -794,8 +794,7 @@ void nfs_close_context(struct nfs_open_c
 EXPORT_SYMBOL_GPL(nfs_close_context);
 
 struct nfs_open_context *alloc_nfs_open_context(struct dentry *dentry,
-						fmode_t f_mode,
-						struct file *filp)
+						fmode_t f_mode)
 {
 	struct nfs_open_context *ctx;
 	struct rpc_cred *cred = rpc_lookup_cred();
@@ -814,7 +813,7 @@ struct nfs_open_context *alloc_nfs_open_
 	ctx->mode = f_mode;
 	ctx->flags = 0;
 	ctx->error = 0;
-	ctx->flock_owner = (fl_owner_t)filp;
+	ctx->flock_owner = NULL;
 	nfs_init_lock_context(&ctx->lock_context);
 	ctx->lock_context.open_context = ctx;
 	INIT_LIST_HEAD(&ctx->list);
@@ -882,6 +881,7 @@ EXPORT_SYMBOL_GPL(nfs_inode_attach_open_
 void nfs_file_set_open_context(struct file *filp, struct nfs_open_context *ctx)
 {
 	filp->private_data = get_nfs_open_context(ctx);
+	ctx->flock_owner = (fl_owner_t)filp;
 	if (list_empty(&ctx->list))
 		nfs_inode_attach_open_context(ctx);
 }
@@ -930,7 +930,7 @@ int nfs_open(struct inode *inode, struct
 {
 	struct nfs_open_context *ctx;
 
-	ctx = alloc_nfs_open_context(file_dentry(filp), filp->f_mode, filp);
+	ctx = alloc_nfs_open_context(file_dentry(filp), filp->f_mode);
 	if (IS_ERR(ctx))
 		return PTR_ERR(ctx);
 	nfs_file_set_open_context(filp, ctx);
--- a/fs/nfs/nfs4file.c
+++ b/fs/nfs/nfs4file.c
@@ -57,10 +57,11 @@ nfs4_file_open(struct inode *inode, stru
 	parent = dget_parent(dentry);
 	dir = d_inode(parent);
 
-	ctx = alloc_nfs_open_context(file_dentry(filp), filp->f_mode, filp);
+	ctx = alloc_nfs_open_context(file_dentry(filp), filp->f_mode);
 	err = PTR_ERR(ctx);
 	if (IS_ERR(ctx))
 		goto out;
+	ctx->flock_owner = (fl_owner_t)filp;
 
 	attr.ia_valid = ATTR_OPEN;
 	if (openflags & O_TRUNC) {
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -3701,7 +3701,7 @@ nfs4_proc_create(struct inode *dir, stru
 	struct nfs4_state *state;
 	int status = 0;
 
-	ctx = alloc_nfs_open_context(dentry, FMODE_READ, NULL);
+	ctx = alloc_nfs_open_context(dentry, FMODE_READ);
 	if (IS_ERR(ctx))
 		return PTR_ERR(ctx);
 
--- a/include/linux/nfs_fs.h
+++ b/include/linux/nfs_fs.h
@@ -77,7 +77,6 @@ struct nfs_lock_context {
 struct nfs4_state;
 struct nfs_open_context {
 	struct nfs_lock_context lock_context;
-	fl_owner_t flock_owner;
 	struct dentry *dentry;
 	struct rpc_cred *cred;
 	struct nfs4_state *state;
@@ -91,6 +90,9 @@ struct nfs_open_context {
 
 	struct list_head list;
 	struct nfs4_threshold	*mdsthreshold;
+#ifndef __GENKSYMS__
+	fl_owner_t flock_owner;
+#endif
 };
 
 struct nfs_open_dir_context {
@@ -368,7 +370,7 @@ extern void nfs_setsecurity(struct inode
 extern struct nfs_open_context *get_nfs_open_context(struct nfs_open_context *ctx);
 extern void put_nfs_open_context(struct nfs_open_context *ctx);
 extern struct nfs_open_context *nfs_find_open_context(struct inode *inode, struct rpc_cred *cred, fmode_t mode);
-extern struct nfs_open_context *alloc_nfs_open_context(struct dentry *dentry, fmode_t f_mode, struct file *filp);
+extern struct nfs_open_context *alloc_nfs_open_context(struct dentry *dentry, fmode_t f_mode);
 extern void nfs_inode_attach_open_context(struct nfs_open_context *ctx);
 extern void nfs_file_set_open_context(struct file *filp, struct nfs_open_context *ctx);
 extern void nfs_file_clear_open_context(struct file *flip);
