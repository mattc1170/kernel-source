From: Ursula Braun <ubraun@linux.vnet.ibm.com>
Subject: net/af_iucv: don't use paged skbs for TX on HiperSockets
Patch-mainline: v4.10-rc4
Git-commit: dc5367bcc556e97555fc94a32cd1aadbebdff47e
References: bnc#1020945, LTC#150566

Description:  af_iucv: fix skb leak for HIPER transport
Symptom:      failure to allocate a new skb to be sent
Problem:      The qeth driver for Layer 3 HiperSockets currently does not
              support NETIF_F_SG, so scattered skbs would just be linearized
              again by the stack. This is useless overhead, and even worse,
              large paged skbs are not freed completely resulting in the
              described skb leak.
Solution:     Use paged skbs only for IUCV transport, but not for HIPER
              transport.
Reproduction: Run an AF_IUCV socket program sending large messages with
              HIPER transport.

Upstream-Description:

              net/af_iucv: don't use paged skbs for TX on HiperSockets

              With commit e53743994e21
              ("af_iucv: use paged SKBs for big outbound messages"),
              we transmit paged skbs for both of AF_IUCV's transport modes
              (IUCV or HiperSockets).
              The qeth driver for Layer 3 HiperSockets currently doesn't
              support NETIF_F_SG, so these skbs would just be linearized again
              by the stack.
              Avoid that overhead by using paged skbs only for IUCV transport.

              cc stable, since this also circumvents a significant skb leak when
              sending large messages (where the skb then needs to be linearized).

              Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
              Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
              Cc: <stable@vger.kernel.org> # v4.8+
              Fixes: e53743994e21 ("af_iucv: use paged SKBs for big outbound messages")
              Signed-off-by: David S. Miller <davem@davemloft.net>


Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.com>
---
 net/iucv/af_iucv.c |   25 ++++++++++++++-----------
 1 file changed, 14 insertions(+), 11 deletions(-)

--- a/net/iucv/af_iucv.c
+++ b/net/iucv/af_iucv.c
@@ -1033,7 +1033,8 @@ static int iucv_sock_sendmsg(struct sock
 {
 	struct sock *sk = sock->sk;
 	struct iucv_sock *iucv = iucv_sk(sk);
-	size_t headroom, linear;
+	size_t headroom = 0;
+	size_t linear;
 	struct sk_buff *skb;
 	struct iucv_message txmsg;
 	struct cmsghdr *cmsg;
@@ -1111,18 +1112,20 @@ static int iucv_sock_sendmsg(struct sock
 	 * this is fine for SOCK_SEQPACKET (unless we want to support
 	 * segmented records using the MSG_EOR flag), but
 	 * for SOCK_STREAM we might want to improve it in future */
-	headroom = (iucv->transport == AF_IUCV_TRANS_HIPER)
-		   ? sizeof(struct af_iucv_trans_hdr) + ETH_HLEN : 0;
-	if (headroom + len < PAGE_SIZE) {
+	if (iucv->transport == AF_IUCV_TRANS_HIPER) {
+		headroom = sizeof(struct af_iucv_trans_hdr) + ETH_HLEN;
 		linear = len;
 	} else {
-		/* In nonlinear "classic" iucv skb,
-		 * reserve space for iucv_array
-		 */
-		if (iucv->transport != AF_IUCV_TRANS_HIPER)
-			headroom += sizeof(struct iucv_array) *
-				    (MAX_SKB_FRAGS + 1);
-		linear = PAGE_SIZE - headroom;
+		if (len < PAGE_SIZE) {
+			linear = len;
+		} else {
+			/* In nonlinear "classic" iucv skb,
+			 * reserve space for iucv_array
+			 */
+			headroom = sizeof(struct iucv_array) *
+				   (MAX_SKB_FRAGS + 1);
+			linear = PAGE_SIZE - headroom;
+		}
 	}
 	skb = sock_alloc_send_pskb(sk, headroom + linear, len - linear,
 				   noblock, &err, 0);
