From: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Subject: s390/diag: add diag26c support
Patch-mainline: v4.13-rc1
Git-commit: 1b030478166cdbdffe9bcffadc32558b4b511869
References: bnc#1053472, LTC#156729

Description:  qeth: avoid MAC address conflict after Guest Migration
Symptom:      qeth device gets assigned a MAC address that is already
              present in the network.
Problem:      On z/VM Guest Migration, qeth caches a device's previously
              assigned MAC address and re-registers it on the new host.
              When a new guest is subsequently started on the old host,
              it may be assigned this very same MAC address and attempt
              to use it. This results in an address conflict for the new
              guest.
Solution:     When running as z/VM guest, use z/VM's MAC Service
              (Diag 26C) to obtain a hypervisor-managed MAC address.
              On Guest Migration, z/VM ensures that this address is
              not reassigned by the old host.
Reproduction: -

Upstream-Description:

              s390/diag: add diag26c support

              Implement support for the hypervisor diagnose 0x26c
              ('Access Certain System Information').
              It passes a request buffer and a subfunction code, and receives
              a response buffer and a return code.

              Also add the scaffolding for the 'MAC Services' subfunction.
              It may be used by network devices to obtain a hypervisor-managed
              MAC address.

              Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
              Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
              Signed-off-by: David S. Miller <davem@davemloft.net>


Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
Acked-by: Hannes Reinecke <hare@suse.com>
---
 arch/s390/include/asm/diag.h |   27 +++++++++++++++++++++++++++
 arch/s390/kernel/diag.c      |   29 +++++++++++++++++++++++++++++
 2 files changed, 56 insertions(+)

--- a/arch/s390/include/asm/diag.h
+++ b/arch/s390/include/asm/diag.h
@@ -8,6 +8,7 @@
 #ifndef _ASM_S390_DIAG_H
 #define _ASM_S390_DIAG_H
 
+#include <linux/if_ether.h>
 #include <linux/percpu.h>
 
 enum diag_stat_enum {
@@ -24,6 +25,7 @@ enum diag_stat_enum {
 	DIAG_STAT_X224,
 	DIAG_STAT_X250,
 	DIAG_STAT_X258,
+	DIAG_STAT_X26C,
 	DIAG_STAT_X288,
 	DIAG_STAT_X2C4,
 	DIAG_STAT_X2FC,
@@ -78,4 +80,29 @@ struct diag210 {
 
 extern int diag210(struct diag210 *addr);
 
+enum diag26c_sc {
+	DIAG26C_MAC_SERVICES = 0x00000030
+};
+
+enum diag26c_version {
+	DIAG26C_VERSION2 = 0x00000002	/* z/VM 5.4.0 */
+};
+
+#define DIAG26C_GET_MAC	0x0000
+struct diag26c_mac_req {
+	u32	resp_buf_len;
+	u32	resp_version;
+	u16	op_code;
+	u16	devno;
+	u8	res[4];
+};
+
+struct diag26c_mac_resp {
+	u32	version;
+	u8	mac[ETH_ALEN];
+	u8	res[2];
+} __aligned(8);
+
+int diag26c(void *req, void *resp, enum diag26c_sc subcode);
+
 #endif /* _ASM_S390_DIAG_H */
--- a/arch/s390/kernel/diag.c
+++ b/arch/s390/kernel/diag.c
@@ -37,6 +37,7 @@ static const struct diag_desc diag_map[N
 	[DIAG_STAT_X224] = { .code = 0x224, .name = "EBCDIC-Name Table" },
 	[DIAG_STAT_X250] = { .code = 0x250, .name = "Block I/O" },
 	[DIAG_STAT_X258] = { .code = 0x258, .name = "Page-Reference Services" },
+	[DIAG_STAT_X26C] = { .code = 0x26c, .name = "Certain System Information" },
 	[DIAG_STAT_X288] = { .code = 0x288, .name = "Time Bomb" },
 	[DIAG_STAT_X2C4] = { .code = 0x2c4, .name = "FTP Services" },
 	[DIAG_STAT_X2FC] = { .code = 0x2fc, .name = "Guest Performance Data" },
@@ -196,3 +197,31 @@ int diag210(struct diag210 *addr)
 	return ccode;
 }
 EXPORT_SYMBOL(diag210);
+
+/*
+ * Diagnose 26C: Access Certain System Information
+ */
+static inline int __diag26c(void *req, void *resp, enum diag26c_sc subcode)
+{
+	register unsigned long _req asm("2") = (addr_t) req;
+	register unsigned long _resp asm("3") = (addr_t) resp;
+	register unsigned long _subcode asm("4") = subcode;
+	register unsigned long _rc asm("5") = -EOPNOTSUPP;
+
+	asm volatile(
+		"	sam31\n"
+		"	diag	%[rx],%[ry],0x26c\n"
+		"0:	sam64\n"
+		EX_TABLE(0b,0b)
+		: "+d" (_rc)
+		: [rx] "d" (_req), "d" (_resp), [ry] "d" (_subcode)
+		: "cc", "memory");
+	return _rc;
+}
+
+int diag26c(void *req, void *resp, enum diag26c_sc subcode)
+{
+	diag_stat_inc(DIAG_STAT_X26C);
+	return __diag26c(req, resp, subcode);
+}
+EXPORT_SYMBOL(diag26c);
